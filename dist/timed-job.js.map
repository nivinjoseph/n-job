{"version":3,"file":"timed-job.js","sourceRoot":"","sources":["../src/timed-job.ts"],"names":[],"mappings":";;;;;;;;;;AACA,0DAAiD;AACjD,gDAA0D;AAI1D,MAAsB,QAAQ;IAa1B,YAAmB,MAAc,EAAE,oBAA4B;QAPvD,gBAAW,GAAG,KAAK,CAAC;QASxB,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,mBAAK,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAElD,IAAI,CAAC,oBAAoB,GAAG,IAAI,4BAAmB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAQ,CAAC,EAAE,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QAE/H,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAClE,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAClE,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE;YAE9B,IAAI,IAAI,CAAC,oBAAoB,CAAC,WAAW,GAAG,CAAC;gBACzC,OAAO;YAEX,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACtE,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,CAAC;IAvBD,IAAc,MAAM,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACvD,IAAc,UAAU,KAAc,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IA2BnD,OAAO;;YAEhB,IAAI,IAAI,CAAC,WAAW;gBAChB,OAAO;YAEX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC;KAAA;IAGa,WAAW;;YAErB,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,6BAAsC,IAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACzF,IACA;gBACI,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;aACpB;YACD,OAAO,KAAK,EACZ;gBACI,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,2BAAoC,IAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;gBAC1F,MAAM,KAAK,CAAC;aACf;YACD,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,8BAAuC,IAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC9F,CAAC;KAAA;CACJ;AA/DD,4BA+DC","sourcesContent":["import { Logger } from \"@nivinjoseph/n-log\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { BackgroundProcessor } from \"@nivinjoseph/n-util\";\nimport { Job } from \"./job\";\n\n// public\nexport abstract class TimedJob implements Job\n{\n    private readonly _logger: Logger;\n    private readonly _intervalMilliseconds: number;\n    private readonly _backgroundProcessor: BackgroundProcessor;\n    private readonly _interval: any;\n    private _isDisposed = false;\n\n    \n    protected get logger(): Logger { return this._logger; }\n    protected get isDisposed(): boolean { return this._isDisposed; }\n\n\n    public constructor(logger: Logger, intervalMilliseconds: number)\n    {\n        given(logger, \"logger\").ensureHasValue().ensureIsObject();\n        this._logger = logger;\n\n        given(intervalMilliseconds, \"intervalMilliseconds\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0);\n        this._intervalMilliseconds = intervalMilliseconds;\n\n        this._backgroundProcessor = new BackgroundProcessor((e) => this._logger.logError(e as any), this._intervalMilliseconds, false);\n\n        this._backgroundProcessor.processAction(() => this.runInternal());\n        this._backgroundProcessor.processAction(() => this.runInternal());\n        this._interval = setInterval(() =>\n        {\n            if (this._backgroundProcessor.queueLength > 2)\n                return;\n            \n            this._backgroundProcessor.processAction(() => this.runInternal());\n        }, this._intervalMilliseconds);\n    }\n\n\n    public abstract run(): Promise<void>;\n\n    public async dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return;\n        \n        this._isDisposed = true;\n        \n        clearInterval(this._interval);\n        await this._backgroundProcessor.dispose(true);\n    }\n\n\n    private async runInternal(): Promise<void>\n    {\n        await this._logger.logInfo(`Starting to run timed job ${(<Object>this).getTypeName()}.`);\n        try \n        {\n            await this.run();\n        }\n        catch (error)\n        {\n            await this._logger.logWarning(`Failed to run timed job ${(<Object>this).getTypeName()}.`);\n            throw error;\n        }\n        await this._logger.logInfo(`Finished running timed job ${(<Object>this).getTypeName()}.`);\n    }\n}"]}