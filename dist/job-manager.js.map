{"version":3,"file":"job-manager.js","sourceRoot":"","sources":["../src/job-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Container, Registry } from \"@nivinjoseph/n-ject\";\nimport { ObjectDisposedException } from \"@nivinjoseph/n-exception\";\nimport { Disposable } from \"@nivinjoseph/n-util\";\nimport { JobConfig } from \"./job-config\";\nimport { Job } from \"./job\";\n\n// public\nexport class JobManager implements Disposable\n{\n    private readonly _container: Container;\n    private readonly _jobRegistrations: ReadonlyArray<JobRegistration>;\n\n    private _isDisposed = false;\n    private _isBootstrapped = false;\n\n\n    public get containerRegistry(): Registry { return this._container; }\n\n\n    public constructor(config: JobConfig)\n    {\n        given(config, \"config\").ensureHasValue().ensureIsObject();\n\n        this._container = new Container();\n        if (config.iocInstaller)\n            this._container.install(config.iocInstaller);\n\n        this._jobRegistrations = this.createJobRegistrations(config.jobClasses);\n    }\n\n\n    public bootstrap(): void\n    {\n        if (this._isDisposed)\n            throw new ObjectDisposedException(this);\n\n        given(this, \"this\").ensure(t => !t._isBootstrapped, \"bootstrapping more than once\");\n\n        this._container.bootstrap();\n\n        this._jobRegistrations.forEach(t => t.storeJobInstance(this._container.resolve<Job>(t.jobTypeName)));\n\n        this._isBootstrapped = true;\n    }\n\n    public async dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return;\n\n        this._isDisposed = true;\n\n        await this._container.dispose();\n    }\n\n\n    private createJobRegistrations(jobClasses: ReadonlyArray<Function>): ReadonlyArray<JobRegistration>\n    {\n        given(jobClasses, \"jobClasses\").ensureHasValue().ensureIsArray();\n\n        const jobRegistrations = jobClasses.map(t => new JobRegistration(t));\n\n        jobRegistrations.forEach(t => this._container.registerSingleton(t.jobTypeName, t.jobType));\n\n        return jobRegistrations;\n    }\n}\n\n\nclass JobRegistration\n{\n    private readonly _jobTypeName: string;\n    private readonly _jobType: Function;\n    \n    private _jobInstance: Job | null;\n\n\n    public get jobTypeName(): string { return this._jobTypeName; }\n    public get jobType(): Function { return this._jobType; }\n    public get jobInstance(): Job | null { return this._jobInstance; }\n\n\n    public constructor(jobType: Function)\n    {\n        given(jobType, \"jobType\").ensureHasValue().ensureIsFunction();\n\n        this._jobTypeName = (<Object>jobType).getTypeName();\n        this._jobType = jobType;\n        this._jobInstance = null;\n    }\n    \n    \n    public storeJobInstance(job: Job): void\n    {\n        given(job, \"job\").ensureHasValue().ensureIsObject();\n        given(this, \"this\").ensure(t => t._jobInstance == null, \"storing job instance twice\");\n        \n        this._jobInstance = job;\n    }\n}"]}